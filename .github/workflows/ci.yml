name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job pour installer les dépendances et tester le backend
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint backend code
      run: npm run lint
      continue-on-error: true
      
    - name: Run backend tests
      run: npm test
      continue-on-error: true

  # Job pour installer les dépendances et tester le frontend
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint frontend code
      run: npm run lint
      continue-on-error: true
      
    - name: Build frontend
      run: npm run build
      
    - name: Run frontend tests
      run: npm test
      continue-on-error: true

  # Job de linting global
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    # Install dependencies for both frontend and backend
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    # Run linting for both projects
    - name: Lint backend
      run: |
        cd backend
        npm run lint || echo "Backend linting completed with warnings"
        
    - name: Lint frontend
      run: |
        cd frontend
        npm run lint || echo "Frontend linting completed with warnings"
        
    # Optional: Check for security vulnerabilities
    - name: Security audit backend
      run: |
        cd backend
        npm audit --audit-level=high || echo "Security audit completed"
        
    - name: Security audit frontend
      run: |
        cd frontend
        npm audit --audit-level=high || echo "Security audit completed"
